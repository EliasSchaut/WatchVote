# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthModel {
  """The barrier token."""
  barrier_token: String

  """Indicates if user is admin."""
  is_admin: Boolean
}

type UserModel {
  """Unique id number of user used for comparison"""
  id: ID!

  """Unique public username of user used to display to others"""
  username: String!

  """Unique private email of user used to login and receive emails"""
  email: String

  """Hashed password of user used for login"""
  password: String

  """First name of user. Only public if profile is public"""
  first_name: String

  """Last name of user. Only public if profile is public"""
  last_name: String

  """Link to profile picture of user. Only public if profile is public"""
  avatar: String

  """Short bio of user. Only public if profile is public"""
  bio: String

  """Indicates whether the user wants their profile to be public"""
  profile_public: Boolean

  """Indicates whether the user wants to receive non essential emails"""
  email_opt_in: Boolean

  """Indicates whether the user is an admin"""
  is_admin: Boolean

  """Challenge string used for password reset and account verification"""
  challenge: String

  """Unique id number of server on which the user is registered"""
  server_id: Float

  """Indicates whether the user account is verified"""
  verified: Boolean

  """Indicates whether a password reset was requested"""
  pw_reset: Boolean
}

"""Oauth information"""
type ServerOauthModel {
  """Unique id number of server used for comparison"""
  id: Float

  """Name of oauth"""
  name: String

  """Client id of oauth"""
  client_id: String

  """
  Hidden client secret of oauth. Only accessible when using secret-api-key.
  """
  client_secret: String
}

"""Server Information"""
type ServerModel {
  """Unique id number of server used for comparison"""
  id: Int

  """Visible title of the server"""
  title: String

  """Unique name of the server"""
  name: String

  """Description of the server"""
  desc: String

  """Oauth information"""
  oauth(secret_api_key: String = null, name: String = null): [ServerOauthModel!]
}

type MovieHistoryModel {
  imdb_id: String!
  lang_meta: String!
  title: String!
  imdb_link: String!
  watched_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  auth_sign_in(email: String!, password: String!): AuthModel!

  """Get server Information"""
  server: ServerModel!
  user: UserModel!
  history_get_all: [MovieHistoryModel!]!
}

type Mutation {
  auth_register(user_input_data: UserInputModel!): UserModel!
  auth_verify(challenge: String!): UserModel!
  auth_user_pw_reset(user_pw_reset_input_data: UserPwResetInputModel!): UserModel!

  """
  Request a password reset for a user. A new challenge will sent to the user's email. Returns true if the request was successful.
  """
  auth_user_pw_reset_request(username: String!): Boolean!
  user_update(user_update_input_data: UserUpdateInputModel!): UserModel!
  user_delete: UserModel!
  history_add(history_input: MovieHistoryInputModel!): MovieHistoryModel!
  history_delete(imdb_id_input: ImdbIdInputModel!): MovieHistoryModel!
}

input UserInputModel {
  username: String!
  email: String!
  password: String!
  first_name: String!
  last_name: String!
  avatar: String
  bio: String
  profile_public: Boolean = false
  email_opt_in: Boolean = false
}

input UserPwResetInputModel {
  """Challenge string used for password reset and account verification"""
  challenge: String!

  """New password of user used for login"""
  password: String!
}

input UserUpdateInputModel {
  first_name: String
  last_name: String
}

input MovieHistoryInputModel {
  imdb_id: String!
  watched_at: DateTime = "2023-12-18T15:54:52.163Z"
}

input ImdbIdInputModel {
  imdb_id: String!
}